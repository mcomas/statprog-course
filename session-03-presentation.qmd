---
title: Statistical programming
title-slide-attributes:
  data-background-image: mvtec-cover-statistical-programming-4x3.png
  data-background-size: contain
  data-background-opacity: "0.1"
subtitle: Creating graphics with `ggplot2`
author: Marc Comas-Cufí
format: 
  revealjs:
    self-contained: true
    smaller: true
    logo: mvtec-cover-statistical-programming-4x3.png
fontsize: 12pt
---

```{r setup, include=FALSE}
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", warning = FALSE)
options(tibble.print_min = 5, tibble.print_max = 5, width=70)
```

## Today's session

```{r, echo=FALSE, results='asis'}
cat(readr::read_lines("session-03-content.md"), sep='\n')
```

## R plotting systems

* __graphics__. Defaults R plotting system. Fast for exploratory analysis. Nice graphics are constructed step by step using different calls.
* __grid__ package based.
    * __lattice__. Fast plots for exploratory analysis. By default plots are nicer than base system. Tuning is difficult.
    * __ggplot2__. System implementing a layered grammar of graphics.


## Visualising data with `ggplot2`

Fuel economy data from 1999 to 2008 for 38 popular models of cars:

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
data(mpg, package='ggplot2')
mpg
```

## Creating graphics with `ggplot2`

```r
 ggplot(data = <DATA>) +                        # INITIAL LAYER
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>)) +  # NEXT LAYER
  ⋮
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>)) +  # LAST LAYER
  <TUNNING>
```

* DATA: available variables
* GEOM_FUNCTION: what should be plotted
* MAPPINGS: relations between variables and aesthetics

## Creating graphics with `ggplot2`

* Mapping: `displ` $\rightarrow$ `x`, `hwy` $\rightarrow$ `y`

```{r, fig.width=4, fig.height=3}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy))
```

## Creating graphics with `ggplot2`

* Mapping: `displ` $\rightarrow$ `x`, `hwy` $\rightarrow$ `y`, `class` $\rightarrow$ `color`

```{r, fig.width=5.5, fig.height=3}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```

## Creating graphics with `ggplot2`

* Mapping: `displ` $\rightarrow$ `x`, `hwy` $\rightarrow$ `y`
* We can fix the value of aesthetics

```{r, fig.width=4, fig.height=3}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy), color = "#3366ff", shape = 15)
```

## Creating graphics with `ggplot2`

* Mapping: `displ` $\rightarrow$ `x`, `hwy` $\rightarrow$ `y`
* We can add more layers

```{r, fig.width=4, fig.height=3, echo=TRUE, message=FALSE}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(x = displ, y = hwy), method = 'lm')
```

## Creating graphics with `ggplot2`

* Mapping: `displ` $\rightarrow$ `x`, `hwy` $\rightarrow$ `y`
* We can add more layers

```{r, fig.width=4, fig.height=3}
ggplot(data = mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth(method = 'lm')
```

## Adding labels

```{r, fig.width=5.5, fig.height=3}
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  labs(title = "Bivariate plot",
       subtitle = "Relation between engine displacement and consumption",
       x = 'Engine displacement (liters)', y = 'Consumption (milles x gallon)', 
       color = 'Car class', caption = "Statistical Programming Course")
```

## Faceting (`facet_wrap()` and `facet_grid()`)

```{r, fig.width=7, fig.height=2, message = FALSE}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + geom_smooth(method = 'lm') + 
  facet_wrap(~drv)
```

## Faceting (`facet_wrap()` and `facet_grid()`)

```{r, fig.width=7, fig.height=3.5, message = FALSE}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + geom_smooth(method = 'lm') + 
  facet_grid(year~drv)
```

## Themes

```{r, fig.width=7, fig.height=3.5, message = FALSE}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + geom_smooth(method = 'lm') + 
  facet_grid(year~drv) +
  theme_minimal()
```

## Themes

```{r, fig.width=7, fig.height=3.5, message = FALSE}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + geom_smooth(method = 'lm') + 
  facet_grid(year~drv) +
  theme_minimal() +
  theme(strip.text = element_text(face = "bold.italic"), 
        strip.background = element_rect(fill = 'grey'))
```

## Saving a `ggplot2`figure

```{r, eval=FALSE}
# Check size with par('din')
ggsave(plot = p, filename =  "filename.pdf", width = 6, height = 4)
ggsave(plot = p, filename =  "filename.svg", width = 6, height = 4)
```

If `plot` parameter is omitted, last plot will be saved.

## Learning more about `ggplot2`

* <https://ggplot2.tidyverse.org>
* Cheat sheet [html](https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf)
* R Graphics Cookbook <https://r-graphics.org/>
* The R Graph Gallery <https://www.r-graph-gallery.com/ggplot2-package.html>
* `gggplot2`: Elegant Graphics for Data Analysis <https://ggplot2-book.org/>

# Descriptive statistics: Univariate analysis

```{r, include=FALSE}
set.seed(1)
library(nycflights13)
flights = sample_n(flights, 1000) # For faster generation
```

## Summarising a categorical variable

* How is the distribution of `origin`?

```{r, fig.width=8, fig.height=3, fig.align='default', fig.show='hold'}
p1 = ggplot(data=flights) +
  geom_bar(aes(x = origin))

p2 = ggplot(data=flights) +
  geom_bar(aes(x = origin, 
               y=(..count..)/sum(..count..)))

library(patchwork)
p1 + p2
```

## Summarising a categorical variable

```{r, fig.width=3.5, fig.height=3, fig.show='hold'}
dtab = flights %>% count(origin) %>%
  mutate(p = sprintf("%0.1f%%", 100*prop.table(n)),
         cn = rev(cumsum(rev(n))),
         y = cn + diff(c(cn,0))/2 )

ggplot(data=flights) +
  geom_bar(aes(x="",y=(..count..), fill=origin)) +
  geom_text(data=dtab, aes(x="", y=y, label = p)) +
  coord_polar(theta = 'y', start = pi/2, direction = 1) +
  theme_void()
```


## Summarising a numerical variable

* How is the distribution of `dep_delay`?

```{r, fig.width=4, fig.height=3}
ggplot() +
  geom_histogram(data=flights, aes(x=dep_delay), bins = 10)
```

## Summarising a numerical variable

* How is the distribution of `dep_delay`?

```{r, fig.width=4, fig.height=3}
ggplot() +
  geom_histogram(data=flights, aes(x=dep_delay), breaks = c(-50, 0, 50, 200, 1500))
```

## Summarising a numerical variable

* How is the distribution of `dep_delay`?

```{r, fig.width=4, fig.height=3}
ggplot() +
  geom_boxplot(data=flights, aes(x=dep_delay))
```

## Summarising a numerical variable

* How is the distribution of `dep_delay`?

```{r, fig.width=4, fig.height=3}
ggplot() +
  geom_density(data=flights, aes(x=dep_delay), col=NA, fill = 'blue', alpha=0.4)
```

## Summarising a numerical variable

* How is the distribution of `dep_delay`?

```{r, fig.width=4, fig.height=3}
ggplot() +
  geom_density(data=flights, aes(x=dep_delay), col=NA, fill = 'blue', alpha=0.4) +
  coord_cartesian(xlim = c(-30,60))
```

## Summarising a numerical variable

* How is the distribution of `dep_delay`?

```{r, fig.width=4, fig.height=3}
ggplot() +
  geom_histogram(data=flights, aes(x=dep_delay), breaks=seq(-50,1500,5), 
                 fill='blue', alpha=0.4) +
  coord_cartesian(xlim = c(-30,60))
```

## Relation between numerical and categorical variables

* How is the distribution of `dep_delay` and `origin`?

```{r, fig.width=4, fig.height=3}
ggplot() +
  geom_boxplot(data=flights, aes(x=origin, y=dep_delay))
```

## Relation between numerical and categorical variables

* How is the distribution of `dep_delay` and `origin`?

```{r, fig.width=4, fig.height=3}
ggplot() +
  geom_density(data=flights, aes(x=dep_delay), col=NA, fill = 'blue', alpha=0.4) +
  coord_cartesian(xlim = c(-30,60)) +
  facet_wrap(~origin, ncol = 1)
```

## Relation between numerical and categorical variables

* How is the distribution of `dep_delay` and `origin`?

```{r, fig.width=4, fig.height=3}
ggplot() +
  geom_histogram(data=flights, aes(x=dep_delay), breaks=seq(-50,1500,5), 
                 fill='blue', alpha=0.4) +
  coord_cartesian(xlim = c(-30,60)) +
  facet_wrap(~origin, ncol = 1)
```

## Relation between numerical and categorical variables

* How is the distribution of `dep_delay` and `origin`?

```{r, fig.width=4, fig.height=3}
library(ggridges)
ggplot() +
  geom_density_ridges(data=flights, aes(x=dep_delay, y = origin), 
                      scale=2, col=NA, fill = 'blue', alpha=0.4) +
  coord_cartesian(xlim = c(-30,60))
```

## Relation between categorical variables

```{r}
flights = flights %>% 
  filter(!is.na(arr_delay)) %>%
  mutate(arrival = if_else(arr_delay > 0, 'delayed', 'on-time'))
```

* How is the distribution of `origin` and `on.time`

```{r, fig.width=4, fig.height=3}
ggplot(data=flights) +
  geom_bar(aes(x=arrival, fill=origin))
```

## Relation between categorical variables

```{r}
flights_n = flights %>% count(origin, arrival)
```

* `origin` relative frequencies

```{r, fig.width=4, fig.height=3}
dplot = group_by(flights_n, arrival) %>% mutate(p = prop.table(n))
ggplot(data=dplot) +
  geom_bar(aes(x=arrival, y=p, fill=origin), stat = 'identity')
```

## Relation between categorical variables

```{r}
flights_n = flights %>% count(origin, arrival)
```

* `arrival` relative frequencies

```{r, fig.width=4, fig.height=3}
dplot = group_by(flights_n, origin) %>% mutate(p = prop.table(n))
ggplot(data=dplot) +
  geom_bar(aes(x=origin, y=p, fill=arrival), stat = 'identity')
```

## Relation between numerical variables

* How is the distribution of `dep_delay` and `arr_delay`?

```{r, fig.width=4, fig.height=3, cache=TRUE}
ggplot(data=flights) +
  geom_point(aes(x=dep_delay, y=arr_delay))
```

## Relation between numerical variables

```{r, fig.width=4, fig.height=3}
ggplot(data=flights) +
  geom_point(aes(x=dep_delay, y=arr_delay, alpha = ..n..), size = 1, stat = 'sum')
# Equivalent,
# ggplot(data=count(flights, dep_delay, arr_delay)) +
#   geom_point(aes(x=dep_delay, y=arr_delay, alpha = n), size = 1, stat = 'identity')
```

# `ggplot2` extensions

## Packages with more themes

* `ggthemes`. [https://github.com/jrnold/ggthemes](https://github.com/jrnold/ggthemes)
* `ggtech`. [https://github.com/ricardo-bion/ggtech](https://github.com/ricardo-bion/ggtech)
* `ggthemr`: [https://github.com/cttobin/ggthemr](https://github.com/cttobin/ggthemr)
* `cowplot`: [https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html)
* `bbplot`. [https://bbc.github.io/rcookbook](https://bbc.github.io/rcookbook)
* `hrbrthemes`: [https://github.com/hrbrmstr/hrbrthemes](https://github.com/hrbrmstr/hrbrthemes)

## Interactive plots with `plotly`

```{r, fig.width=4, fig.height=3, message=FALSE}
library(plotly)

p = ggplot(data = mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth(method = 'lm')

ggplotly(p)
```

## Animations with `gganimate`

```{r, cache=TRUE, message=FALSE}
library(gganimate)
library(gapminder)

p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  facet_wrap(~continent) +
  # Here comes the gganimate specific bits
  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(year) +
  ease_aes('linear')
```

## Animations with `gganimate`

```{r, fig.width=5, fig.height=4, cache=TRUE, message=FALSE}
animate(p, nframes = 20, fps = 5, width = 500, height=400)
```

## 3D plots with `rayshader`

<center>
<video height="240" loop mute playsinline autoplay='true' controls>
 <source src="https://www.tylermw.com/wp-content/uploads/2019/06/spacetimevid.mp4" type="video/mp4"> 
</video>
</center>

* [https://www.tylermw.com/3d-ggplots-with-rayshader/](https://www.tylermw.com/3d-ggplots-with-rayshader/)

BUT REMEMBER:

* Don’t use gratuitous 3D
* It’s difficult to interpret static 3D visualizations

## Other extensions

* `ggmap` for maps <https://github.com/dkahle/ggmap>
* `ggtern`for ternary diagrams <http://www.ggtern.com/>
* `ggdendro` for dendrograms <https://github.com/andrie/ggdendro>

# That's all for today

## Next week session

```{r, echo=FALSE, results='asis'}
cat(readr::read_lines("session-04-content.md"), sep='\n')
```
